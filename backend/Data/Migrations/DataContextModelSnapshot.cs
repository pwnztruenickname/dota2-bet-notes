// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Model.CharacterInTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор записи");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasComment("Связь с персонажем");

                    b.Property<string>("GameRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Игровая роль");

                    b.Property<long>("TeamInGameId")
                        .HasColumnType("bigint")
                        .HasComment("Связь персонажа с конкретным пиком");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("TeamInGameId");

                    b.ToTable("character_in_teams", (string)null);
                });

            modelBuilder.Entity("Data.Model.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор записи");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Комментарий по игре");

                    b.Property<long>("FirstTeamId")
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор пиков первой команды");

                    b.Property<string>("GameResult")
                        .HasColumnType("text")
                        .HasComment("Результат игры");

                    b.Property<long>("SecondTeamId")
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор пиков первой команды");

                    b.HasKey("Id");

                    b.HasIndex("FirstTeamId");

                    b.HasIndex("SecondTeamId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("Data.Model.Hero", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор записи");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Наименование");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("heroes", (string)null);
                });

            modelBuilder.Entity("Data.Model.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("GameRole")
                        .HasColumnType("integer");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Data.Model.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор записи");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Наименование команды");

                    b.HasKey("Id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("Data.Model.TeamInGame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор записи");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор игры");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор команды");

                    b.Property<int>("TeamSide")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("team_in_games", (string)null);
                });

            modelBuilder.Entity("Data.Model.CharacterInTeam", b =>
                {
                    b.HasOne("Data.Model.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.TeamInGame", null)
                        .WithMany("CharactersInTeam")
                        .HasForeignKey("TeamInGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hero");
                });

            modelBuilder.Entity("Data.Model.Game", b =>
                {
                    b.HasOne("Data.Model.TeamInGame", "FirstTeam")
                        .WithMany()
                        .HasForeignKey("FirstTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Model.TeamInGame", "SecondTeam")
                        .WithMany()
                        .HasForeignKey("SecondTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstTeam");

                    b.Navigation("SecondTeam");
                });

            modelBuilder.Entity("Data.Model.Player", b =>
                {
                    b.HasOne("Data.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.TeamInGame", b =>
                {
                    b.HasOne("Data.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.TeamInGame", b =>
                {
                    b.Navigation("CharactersInTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
